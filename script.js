// Fonctionnalit√© 1 :
// ------------------
// On commence par un petit √©chauffement : lorsque l'utilisateur va cliquer sur le footer (portant le tag <footer>), tu vas afficher le mot "clique" en console.
// Cette fonctionnalit√© doit √™tre cod√©e avec un addEventListener("click", function(){ } car c'est une bonne habitude √† prendre ! üòá
// Fonctionnalit√© 1-bis :
// ----------------------
// Maintenant on va upgrader cette premi√®re fonctionnalit√© : lorsque l'utilisateur va cliquer sur le footer, tu vas afficher en console "clic num√©ro x" avec x
// qui commence √† 1 et s'incr√©mente de +1 √† chaque clic.


// 1/ On r√©cup√®re l'objet console :
// --------------------------------
let fooElt = document.getElementsByTagName("footer")[0];

// 2/ On d√©finit la function :
// ---------------------------
let numberOfFooterClick = 0;
let onFooterClick = function() {
  // On affiche clique en console :
  numberOfFooterClick++;
  console.log("clique : " + numberOfFooterClick);  
};

// 3/ On √©coute le footer, sur l'action click, et on lui relie l'action de la function
// -----------------------------------------------------------------------------------
fooElt.addEventListener("click", onFooterClick);



// Fonctionnalit√© 2 :
// ------------------
// On va enfin faire fonctionner ce satan√© "Hamburger Menu" qui s'affiche depuis le d√©but mais qui n'actionne rien quand on clique dessus. C'est quoi un "hamburger menu" ?
// C'est √ßa, ce bouton avec trois lignes horizontales en haut √† droite de la navbar.

// Tu vas faire que si quelqu'un clique sur ce bouton, l'√©l√©ment HTML portant l'Id navbarHeader perde sa classe collapse. Une fois que √ßa, √ßa marche, fait que
// si on clique √† nouveau dessus, la classe collapse soit rajout√©e √† nouveau √† l'√©l√©ment portant l'Id navbarHeader


// 1/ On r√©cup√®re le "Hamburger Menu" : toggleButtonElt
let toggleButtonElt = document.getElementsByClassName("navbar-toggler")[0];

// 2/ On r√©cup√®re la div d'id navbarHeader (contient la classe collapse)
let navbarHeaderElt = document.getElementById('navbarHeader');

// 3/ D√©finition de la fonction pour retirer ou ajouter la class collapse de navbarHeaderElt:
let onTogglerClick = function () {
    navbarHeaderElt.classList.toggle('collapse');
};
// Avant lecture de l'indice :
// ---------------------------
// let onTogglerClick = function () {
//   if (navbarHeaderElt.classList.contains('collapse')) {
//     navbarHeaderElt.classList.remove('collapse');
//   } else {
//     navbarHeaderElt.classList.add('collapse');
//   }
// };

// 4/ On √©coute le toggler, sur l'action click, et on lui relie l'action de la function onTogglerClick
// ---------------------------------------------------------------------------------------------------
toggleButtonElt.addEventListener("click", onTogglerClick);



// Fonctionnalit√© 3 (Apr√®s les indices) :
// --------------------------------------
// Commence par bien pointer sur la premi√®re card en entier (stocke-la dans une variable puis affiche-la en console pour confirmer que tu l'as bien point√©).
// Puis pointe vers le bouton Edit de cette card (idem : stocke-le dans une variable et affiche-le en console).
// Une fois que √ßa c'est bien fait, tu peux facilement rajoute un style ="color: red" au texte de la card !
let firstCardElt = document.getElementsByClassName("card")[0];

// Fonctionnalit√© 3 (avant les indices):
// -------------------------------------
// √Ä pr√©sent, on va faire cela : si on clique sur le bouton "Edit" de la premi√®re card, le texte de la card va se mettre en rouge de fa√ßon irr√©versible (sauf si on recharge la page).
// √Ä toi de jouer !

// 1/ S√©lection du boutton edit de la premi√®re card :
let editCardButtonElt1 = document.getElementsByClassName("btn-success")[0]; // bouton de la premi√®re "card"
// 2/ S√©lection de la div du texte de la premi√®re card :
// let textCardElt1 = document.getElementsByClassName("card-text")[0]; // texte de la premi√®re "card"

// 3/ Function : Mise en "red" de style.color
let onEditButtonClick1 = function() {
  // textCardElt1.style.color = "red";
  firstCardElt.style.color = "red";
};

// 4/ On √©coute le "Edit boutton", sur l'action click, et on lui relie l'action de la function onEditButtonClick
// -------------------------------------------------------------------------------------------------------------
editCardButtonElt1.addEventListener("click", onEditButtonClick1);


// Fonctionnalit√© 4 :
// ------------------
// On va faire quelque chose de similaire √† la fonctionnalit√© 3 mais un peu plus complexe : si on clique sur le bouton "Edit" de la deuxi√®me card, le texte de la card
// va se mettre en vert. Si on re-clique dessus, il redevient comme avant ! Tu l'as compris, il va falloir que tu cherches comment faire un "toggle" sur le style du texte.
// C'est plus compliqu√© que sur une classe.
// Fonctionnalit√© 3 (Apr√®s les indices) :
// --------------------------------------
// 1/ S√©lection de la deuxi√®me card :
let secondCardElt = document.getElementsByClassName("card")[1];

// 2/ S√©lection du boutton edit de la premi√®re card :
let editCardButtonElt2 = secondCardElt.getElementsByClassName("btn-success")[0]; // bouton de la premi√®re "card"

// 3/ Function : Mise en "green" de style.color
let onEditButtonClick2 = function() {
  if (secondCardElt.style.color === 'green') {
    secondCardElt.style.color = ""; // retour √† la "default value" !
  } else {
    secondCardElt.style.color = "green";    
  }
};

// 4/ On √©coute le "Edit boutton", sur l'action click, et on lui relie l'action de la function onEditButtonClick
// -------------------------------------------------------------------------------------------------------------
editCardButtonElt2.addEventListener("click", onEditButtonClick2);


// Fonctionnalit√© 5 :
// ------------------
// Pour le fun, on va impl√©menter une fonctionnalit√© √† la sauce ‚ò¢"nucl√©aire"ü§Ø. Et comme elle est un peu dangereuse, on va la cacher‚Ä¶ Voici comment elle doit marcher :
// Si un utilisateur double clique sur la navbar en haut, tout Bootstrap dispara√Æt et la page s'affiche comme si on avait oubli√© de mettre le CDN qui la relie au
// fichier CSS. Si possible, rends cette fonctionnalit√© r√©versible (un nouveau double-clic fait tout revenir √† la normale).

// Indice : Cherche sur Google comment d√©sactiver le tag <link> avec JavaScript.

// 1/ S√©lection de la navbar : On va s√©lectionner tout le <header> car la navbar peut-√™tre en postion d√©ploy√©e ou non (Toggle).
// ---------------------------
let navbarElt = document.getElementsByTagName("header")[0];
console.log(navbarElt);

// 2/ On s√©lectionne le tag <link> qui relie au css de bootstrap (et on garde son parentNode : parentLinkCssElt (<head>)
// -------------------------------
linkCssElt = document.getElementsByTagName("link")[0];
parentLinkCssElt = linkCssElt.parentNode;

// 3/ fonction : faire diparaitre le tag <link> vers le CSS de Bootstrap
// -------------
let onNavbarClick = function() {
    console.log("double click Navbar !!!!!!!!!!")
  if (document.getElementsByTagName("link")[0]) {
    parentLinkCssElt.removeChild(linkCssElt); // On retire le link
  } else {
    parentLinkCssElt.appendChild(linkCssElt); // On r√©-attache le link au head
  }
}

// 4/On √©coute le navbarElt, sur l'action double-click, et on lui relie l'action de la function onNavbarClick
// ----------------------------------------------------------------------------------------------------------
navbarElt.addEventListener("dblclick", onNavbarClick);


    // document.getElementsByClassName("card")[2].style.color = "blue";


// Fonctionnalit√© 6 :
// ------------------
// T'as d√©j√† impl√©ment√© 5 fonctionnalit√©s d'interaction ! C'est top ! On va commencer √† corser les choses.

// La fonctionnalit√© sera la suivante : si un utilisateur passe sa souris sur le bouton "View" d'une card (n'importe laquelle), celle-ci va se r√©duire. Cela veut dire que le texte dispara√Æt, l'image n'appara√Ætra qu'√† 20 % de sa taille d'origine et les boutons "Edit" / "View" restent visibles. Cette fonction sera r√©versible : s'il repasse sa souris, la card redevient normale !

// Indice 1 : Commence par impl√©menter cette fonctionnalit√© sur une card avant d'essayer de les faire toutes.

// Indice 2 : Tu vas devoir appliquer les le√ßons apprises sur la fonctionnalit√© 2 (toggle de la classe "collapse") et sur la fonctionnalit√© 3 (toggle sur le style appliqu√© √† l'image : tant√¥t on lui rajoute "width: 20 %;", tant√¥t on lui enl√®ve).

// Indice 3 : Une fois que √ßa marche sur une card, fait une boucle for sur la liste des 6 cards (a priori tu as extrait la card d'une liste d'√©l√©ments HTML non?) pour appliquer un addEventListener √† chacune. /!\ mets bien le compteur de ta boucle en "let", sinon tu vas avoir des surprises‚Ä¶ => clique ici pour acc√©der √† une ressource qui parle de √ßa
